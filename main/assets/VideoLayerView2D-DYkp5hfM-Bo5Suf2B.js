import{cZ as Y,Y as I,v as p,cV as Q,ao as b,eA as k,ez as q,e9 as F,aA as U,ai as z,I as y,t as W,d5 as Z,aC as J,c4 as T,d as N,jX as K,Q as tt,dd as H,E as R}from"./story-JFVOYdrR.js";import et from"./GraphicsLayer-GkJJfSu5-BXsZlcSl.js";import{E as it}from"./OverlayContainer-Cg_0JxfW-tmDG_Ym1.js";import{o as rt}from"./vec2f64-CEUyUoff-BBc0aQ6D.js";import{O as w}from"./projection-m8vi7Cxv-DOR8gZiI.js";import{u as ot}from"./Container-BdpN3llD-B1OIl91n.js";import{D as st,w as nt}from"./LayerView2D-CCfp06E--BNRj1PMP.js";import{G as lt}from"./enums-DBi1-Mm2-CUS1pvQe.js";import{H as at,O as mt}from"./Texture-DXSFJsEu-Db2S4Hyb.js";import{d as pt}from"./GraphicContainer-CEP0E1kz-Bbid6QOG.js";import{F as ht}from"./GraphicsView2D-yiocyXG3-ChP21LF7.js";import{v as yt}from"./LayerView-D3XoMhlx-CkilFfke.js";import"./main-DL9gKhWh.js";import"./GraphicsCollection-rAFZo1AJ-DOKWWlhf.js";import"./Layer-B8q-l4yV-UHqH7bOz.js";import"./TimeExtent-gZaEUVeW-CrHcxp1g.js";import"./ScaleRangeLayer-DIxukUBC-CPGXyAfH.js";import"./layerContainerType-ChWdCT09-G5sdAsSy.js";import"./jsonUtils-DzmXEA9_-D2u1KLyQ.js";import"./parser-hXQyB-Qx-cQoSULFR.js";import"./mat4f32-CiZjBg9k-CUm34GoR.js";import"./mat4-BFStKTjU-1QUGWWek.js";import"./common-CYWrYyJl-E8-sukrT.js";import"./ElevationInfo-DkWlof50-CwVy2cuZ.js";import"./lengthUtils-wU9RRIqK-D0BTrabh.js";import"./mat3-DOnW3DjW-C3hbW9XY.js";import"./MapView-BcnxJC0k-D5Ymsyvr.js";import"./globalCss-CFN4F315-D1lJyEtj.js";import"./Queue-B8H6jIv7-kg9odJxK.js";import"./signal-DxzURL18-ChsAhSvr.js";import"./Version-BTMwSXf1-DVe9Z8Os.js";import"./CollectionFlattener-9hYRBLDX-CmFMBI-A.js";import"./workers-0oosFQiO-DeeI7A0g.js";import"./intl-DLmy-Li5-DBRx_afr.js";import"./TileInfo-owTCOSRx-C1_E_XEM.js";import"./TileKey-B_6qmYK--BtZdR-Xy.js";import"./jsxFactory-C5LxVioS-CyFel4G_.js";import"./uuid-Dj9mdEVg-BaKSCiyT.js";import"./UpdatingHandles-DBzjq66S-D2rFc9pj.js";import"./Map-DbZVFU-I-HMOiIZ4a.js";import"./Basemap-DxWxjcEH-BY0-klGT.js";import"./loadAll-BIhJ1RSe-BzjT52Rg.js";import"./PortalItem-CJetnHeq-D60UK0Lj.js";import"./HeightModelInfo-BkDck4B0-D35ljTlO.js";import"./timeZoneUtils-z3WjfjXQ-DyIFmsWm.js";import"./ReactiveMap-BaMcQuG3-DB71Wk6k.js";import"./Query-CxQYWcUQ-CwpDSrE5.js";import"./Field-Cj6Pz3TI-CGCPNe4x.js";import"./fieldType-VTpxE-EM-B8dXl_Lh.js";import"./IViewEvents-BE10MM98-CvMfjolG.js";import"./HighlightDefaults-Cg50f_1y-YoJab9yV.js";import"./a11yUtils-C2ydunC--DAkamme9.js";import"./heightModelInfoUtils-CI93rfC7-CZwMmLeX.js";import"./ViewingMode-CyR_b1T8-_s7_Gbsk.js";import"./vec2-BnynUbeJ-CKtGJQAy.js";import"./mat2d-BQA-1WB--Pnyy0dhf.js";import"./normalizeUtils-b-vZURob-KVZiWUZ_.js";import"./utils-DuaeuwP5-2A0E4gsn.js";import"./utils-Jw-4AGsF-B87_7Cj3.js";import"./mat2df32-BCnkwMW8-BLRY8i4P.js";import"./vec2f32-CVhmN3Me-DxoqVD7C.js";import"./Scheduler-Br-2v2ys-BswlaY0j.js";import"./vec32-BuqRmYBM-NaA34lYG.js";import"./unitBezier-DhyPAQO8-B9kUb8N6.js";import"./Tile-DvzRai0K-BDmTyH8B.js";import"./quickselect-DHTstthl-Ds_Aj0x5.js";import"./definitions-CBIQmVpq-o3EUznKY.js";import"./imageUtils-DEFspgr5-BO6sNbNG.js";import"./themeUtils-RB4IoNvm-uO-dsvgO.js";import"./ColorBackground-Dcc9SnXm-BxaaUo0P.js";import"./getDataTypeBytes-HSdrWtlL-ClHsCcSN.js";import"./vec3f32-BS0cezmI-B_madU1n.js";import"./WGLContainer-CF3AeUnM-BYZFLPxZ.js";import"./dataViewUtils-xig9T3UA-CqoJ-ttI.js";import"./VertexElementDescriptor-BAy1DPb3-BOhpDZGx.js";import"./BoundingBox-D9JxeQeA-SaxmeIkg.js";import"./ProgramTemplate-CBS0ERm4-B8ybxtkN.js";import"./VertexArrayObject-DTkLCIKs-CfXO5YX6.js";import"./memoryEstimations-iHVpvWPf-CqIFrGUV.js";import"./config-DB0LnTDt-CYa9nhWp.js";import"./enums-f9UUstHQ-hLTu4V1l.js";import"./earcut-XDcq3zAf-BcwyrT7l.js";import"./featureConversionUtils-DRaHTjrY-D1IwGPxJ.js";import"./OptimizedFeatureSet-D6mgsKNr-CfYY7b8h.js";import"./OptimizedGeometry-1qDYm3YK-BxJgx9YI.js";import"./FeatureCommandQueue-CqM9cs0l-D3s21MOF.js";import"./CIMSymbolHelper-Bcp4nGf3-B2pTyTA2.js";import"./BidiEngine-Bdqv5H5j-Dyqh9XG-.js";import"./fontUtils-Ce-zEYaT-C1WJacBG.js";import"./Rect-KI3be8Nv-ald_3hJF.js";import"./utils-BYqzY6_X-Bs3Rlxes.js";import"./defaultCIMValues-gWpu7WSC-cjxb95kj.js";import"./rasterizingUtils-B8CPqgVl-C4jpzQnA.js";import"./floatRGBA-YJlz5IlR-DMCbFZgG.js";import"./TechniqueType-GommNIdJ-ByYTgVOB.js";import"./GraphShaderModule-C7Apfssb-BMoptY01.js";import"./FramebufferObject-DQw0QX3p-B5SKi5O1.js";import"./ShaderBuilder-BkQM64Qp-cKjQB6kH.js";import"./BindType-CKbZk6AG-Bqvzo9NX.js";import"./UpdateTracking2D-CaPtqow6-BJ7f0h9W.js";import"./QueueProcessor-BtXHzeIT-t_rjypbm.js";import"./utils-DA6J6wjA-DDjZAYSk.js";import"./EffectView-Bw7SZPlx-DL2BopYu.js";import"./utils-C0LvbFCo-RMQaTNpt.js";import"./layerViewUtils-Bk5QNiAa-DNURxBC0.js";import"./AGraphicContainer-BSUvBxvy-3wAO_AN6.js";import"./TechniqueInstance-oJ4weLzg-DdCIsBMC.js";import"./TileContainer-Dc8VVA_r-C_AYDZZu.js";import"./FieldsIndex-Y7EBAYp0-3_P2JAku.js";import"./OverrideHelper-GkMo7t6B-Dk3TjVAM.js";import"./colorUtils-DxUhbS7D-B6ssKn8k.js";import"./vec42-D8CJyqHG-DnfLTeQH.js";import"./vec4f64-CjUMzAyX-DPYbdAom.js";import"./callExpressionWithFeature-uWLbeAgq-BwieYXEJ.js";import"./quantizationUtils-Cndke4AR-BOEMSAvO.js";import"./FeatureMetadata-X_4q5T4e-CHv22MlM.js";import"./diffUtils-BSe9IE26-CcKhXp7I.js";import"./queryUtils-OXllLZed-DJCqUFbU.js";import"./json-BI97KiBB-Ce5cWfI2.js";import"./timeSupport-_0FhDj9z-C-ox53mA.js";import"./TimeOnly-C3SOkmg2-DwbTgv_6.js";import"./labelUtils-Dd5sr1UJ-fQPj67uj.js";import"./mat3f64-Dh9_zhFu-BIT-k8Dm.js";import"./normalizeUtilsSync-C40q69cc-DtCw5Edq.js";import"./dehydratedFeatures-CekTKTy7-BVxw9ToV.js";let d=class extends Y.ClonableMixin(I){constructor(o){super(o),this.frame=null,this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};p([y({type:Boolean})],d.prototype,"frame",void 0),p([y({type:Boolean})],d.prototype,"frameCenter",void 0),p([y({type:Boolean})],d.prototype,"frameOutline",void 0),p([y({type:Boolean})],d.prototype,"lineOfSight",void 0),p([y({type:Boolean})],d.prototype,"sensorLocation",void 0),p([y({type:Boolean})],d.prototype,"sensorTrail",void 0),d=p([W("esri.layers.support.TelemetryDisplay")],d);const $=d,O=2;class ct extends ot{constructor(t){super(),this.element=t,this._handles=new Z,this.isWrapAround=!1,this.perspectiveTransform=rt(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(J(()=>this.element,()=>{const e=this.element;this.ready(),e&&this._handles.add(N(e,"play",()=>this.requestRender()))},T))}getMesh(t){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=K(this.texture)}get textureSize(){if(!this.texture)return[1,1];const t=this.texture.descriptor;return[t.width,t.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(t){const e=this.element;if(e==null)return;const{context:s}=t,{videoWidth:l,videoHeight:r}=e;if(l!==0&&r!==0){if(this.texture)e.paused||this.texture.setData(e);else{const i=new at;i.wrapMode=lt.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=l,i.height=r,this.texture=new mt(s,i,e)}e.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(t)}}_createTransforms(){return null}updateDrawCoords(t,e,s,l){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(t,i,s);const{controlPoints:a,horizon:h}=i,m=Math.sqrt(a.length),c=m,{x:n,y:u}=t,_=this._vertices,G=a[0],P=a[m-1],j=a[(c-1)*m],X=a[(c-1)*m+m-1],E=w(h?h[0].mapPoint:G.mapPoint,s),D=w(h?h[1].mapPoint:P.mapPoint,s),v=w(j.mapPoint,s),L=w(X.mapPoint,s);this.clipGeometry=h?new nt({geometry:tt.fromJSON({rings:[[[v.x,v.y],[L.x,L.y],[D.x,D.y],[E.x,E.y],[v.x,v.y]]],spatialReference:s})}):null;for(let f=0;f<a.length;f++){const A=a[f],{sourcePoint:M,mapPoint:V}=A;if(M==null||V==null)continue;const x=w(V,s);_[f*O+0]=x.x-n,_[f*O+1]=x.y-u}let S=e;if(l){const f=Math.min(E.x,D.x,v.x,L.x),A=Math.max(E.x,D.x,v.x,L.x),{worldWidth:M,xBounds:V}=l,[x,B]=V;f<x&&A>x?S=M:A>B&&f<B&&(S=-M)}this.wrapAroundShift=S,this.isWrapAround=S!==0}draw(t,e){this.isReady&&this._vertices&&this._indices&&this._texCoords?e.render(t,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(t,e,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:l}=e,r=Math.sqrt(l.length),i=r,a=new Float32Array(O*l.length),h=new Uint16Array(2*l.length);for(let n=0;n<l.length;n++){const u=l[n],{sourcePoint:_,mapPoint:G}=u;if(_==null||G==null)continue;const P=w(G,s);a[n*O+0]=P.x-t.x,a[n*O+1]=P.y-t.y,h[2*n+0]=_.x,h[2*n+1]=_.y}const m=new Uint16Array(i*r+(i-2)*(r+2));let c=0;for(let n=0;n<i;n++){for(let u=0;u<r;u++)m[c++]=n*r+u,m[c++]=(n+1)*r+u;n<i-2&&(m[c++]=(n+1)*r+(r-1),m[c++]=(n+1)*r)}this._vertices=a,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const t=this._getFrameControlPoints(),e=this.frameHorizonPoints;let s=null;if(e){const l=e.startX,r=e.startY,i=e.endX,a=e.endY;s=[{sourcePoint:H(l,r),mapPoint:new R(e.startLongitude,e.startLatitude)},{sourcePoint:H(i,a),mapPoint:new R(e.endLongitude,e.endLatitude)}]}return{controlPoints:t,horizon:s}}_getFrameControlPoints(){const t=this.groundControlPoints,e=t?.length;if(!e)return[];const s=new Array(e),l=Math.max(...t.map(({x:i})=>i)),r=this.element.videoWidth/l;for(let i=0;i<e;i++){const{x:a,y:h,lat:m,lon:c}=t[i];s[i]={sourcePoint:H(a*r,-h*r),mapPoint:new R(c,m)}}return s}}const C=new Q([255,127,0]);let g=class extends st(yt){constructor(){super(...arguments),this._graphicsLayer=new et,this._frameOutlineGraphic=new b({symbol:new k({outline:{type:"simple-line",color:C}})}),this._sensorTrailGraphic=new b({symbol:new q({color:C})}),this._lineOfSightGraphic=new b({symbol:new q({color:C})}),this._sensorLocationGraphic=new b({symbol:new F({color:C})}),this._frameCenterGraphic=new b({symbol:new F({color:C,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=C,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){this.addHandles(z(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},T)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new $({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new it,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new ht({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new pt(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([z(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),T),z(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),T)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(o){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(o){this.graphicsView.processUpdate(o)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:o}=this.layer,{visibleTelemetryElements:t}=this;o&&t&&(t.frameOutline&&o.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,t.sensorTrail&&o.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,t.lineOfSight&&o.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,t.sensorLocation&&o.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,t.frameCenter&&o.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const o=new ct(this.layer.videoElement);this.addAttachHandles([z(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:t}=this;t?.frame?(o.frameHorizonPoints=this.layer.frameHorizonPoints,o.groundControlPoints=this.layer.groundControlPoints,o.opacity=1):o.opacity=0},T)]),this._overlayContainer.addChild(o),this.view.stage.requestRender()}};p([y()],g.prototype,"graphicsView",void 0),p([y()],g.prototype,"layer",void 0),p([y()],g.prototype,"symbolColor",void 0),p([y({type:$})],g.prototype,"visibleTelemetryElements",void 0),g=p([W("esri.views.2d.layers.VideoLayerView2D")],g);const dt=g,Ai=Object.freeze(Object.defineProperty({__proto__:null,default:dt},Symbol.toStringTag,{value:"Module"}));export{Ai as V,$ as l};
